from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types
from datetime import datetime, timedelta
import logging
from config import config
from services.database import db
from services import subscription_service
from services.cryptobot import cryptobot
import asyncio

router = Router()
logger = logging.getLogger(__name__)

ONE_TIME_PURCHASES = {
    "single": {"name": "1 –≤–∏–¥–µ–æ", "price": config.SINGLE_VIDEO_PRICE, "amount": 1},
    "pack5": {"name": "5 –≤–∏–¥–µ–æ", "price": config.PACK_5_VIDEOS_PRICE, "amount": 5},
    "pack10": {"name": "10 –≤–∏–¥–µ–æ", "price": config.PACK_10_VIDEOS_PRICE, "amount": 10},
    "pack20": {"name": "20 –≤–∏–¥–µ–æ", "price": config.PACK_20_VIDEOS_PRICE, "amount": 20}
}

SUBSCRIPTION_PLANS = {
    "lite": {"name": "Lite (30 –¥–Ω–µ–π)", "price": config.LITE_PRICE, "duration": 30, "daily_limit": config.LITE_DAILY_LIMIT},
    "premium": {"name": "Premium (30 –¥–Ω–µ–π)", "price": config.PREMIUM_PRICE, "duration": 30, "daily_limit": config.PREMIUM_DAILY_LIMIT}
}

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤
user_invoices = {}

@router.message(Command("buy_videos"))
async def cmd_buy_videos(message: Message):
    """–ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ä–∞–∑–æ–≤—ã—Ö –≤–∏–¥–µ–æ"""
    builder = InlineKeyboardBuilder()
    
    for purchase_id, purchase in ONE_TIME_PURCHASES.items():
        builder.add(types.InlineKeyboardButton(
            text=f"üé¨ {purchase['name']} - {purchase['price']} —Ä—É–±",
            callback_data=f"buy_{purchase_id}"
        ))
    
    builder.add(types.InlineKeyboardButton(
        text="üíé –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Lite",
        callback_data="subscribe_lite"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üíé –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Premium",
        callback_data="subscribe_premium"
    ))
    
    builder.adjust(1)
    
    await message.answer(
        "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=builder.as_markup()
    )

@router.message(Command("subscribe"))
async def cmd_subscribe(message: Message):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    builder = InlineKeyboardBuilder()
    for plan_id, plan in SUBSCRIPTION_PLANS.items():
        builder.add(types.InlineKeyboardButton(
            text=f"{plan['name']} - {plan['price']} —Ä—É–±",
            callback_data=f"subscribe_{plan_id}"
        ))
    builder.adjust(1)
    
    await message.answer(
        "üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data.startswith("buy_"))
async def process_one_time_purchase(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏"""
    purchase_id = callback.data.split("_")[1]
    purchase = ONE_TIME_PURCHASES.get(purchase_id)
    
    if not purchase:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫—É–ø–∫–∏")
        return
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT –∫ —Ä—É–±–ª—é
    rate = await cryptobot.get_exchange_rate()
    if not rate:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    amount_usdt = round(purchase['price'] / rate, 2)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoBot
    invoice = await cryptobot.create_invoice(
        amount_usdt,
        user_id,
        description=f"One-time purchase: {purchase['name']}"
    )
    
    if not invoice:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ
    user_invoices[invoice['invoice_id']] = {
        "user_id": user_id,
        "purchase_id": purchase_id,
        "amount": amount_usdt,
        "status": "created",
        "type": "one_time"
    }
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot",
        url=invoice['pay_url']
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
        callback_data=f"check_payment_{invoice['invoice_id']}"
    ))
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞: {purchase['name']}\n"
        f"–°—É–º–º–∞: {purchase['price']} —Ä—É–± (~{amount_usdt} {config.CRYPTOBOT_CURRENCY})\n"
        f"–°–µ—Ç—å: {config.CRYPTOBOT_NETWORK}\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot'\n"
        "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤ –±–æ—Ç–µ @CryptoBot\n"
        "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–ª–∞—Ç–µ–∂–µ–π)"""
    invoice_id = int(callback.data.split("_")[2])
    invoice_info = user_invoices.get(invoice_id)
    
    if not invoice_info:
        await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    invoice = await cryptobot.check_invoice(invoice_id)
    if not invoice:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if invoice.get("status") == "paid":
        user_id = callback.from_user.id
        
        if invoice_info['type'] == "one_time":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
            purchase = ONE_TIME_PURCHASES.get(invoice_info['purchase_id'])
            if purchase:
                await db.add_video_credits(user_id, purchase['amount'])
                user_invoices[invoice_id]['status'] = "completed"
                
                await callback.message.edit_text(
                    f"‚úÖ –ü–æ–∫—É–ø–∫–∞ {purchase['name']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {purchase['amount']} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ.\n\n"
                    f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {await db.get_video_credits(user_id)} –≤–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç–æ–≤."
                )
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            plan = SUBSCRIPTION_PLANS.get(invoice_info['plan_id'])
            if plan:
                await subscription_service.update_subscription(
                    user_id,
                    "premium",
                    plan["duration"],
                    db.pool
                )
                user_invoices[invoice_id]['status'] = "completed"
                
                await callback.message.edit_text(
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                    f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
                )
    else:
        await callback.answer("‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()


@router.callback_query(F.data.startswith("subscribe_"))
async def process_subscription_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    plan_id = callback.data.split("_")[1]
    plan = SUBSCRIPTION_PLANS.get(plan_id)
    
    if not plan:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT –∫ —Ä—É–±–ª—é
    rate = await cryptobot.get_exchange_rate()
    if not rate:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    amount_usdt = round(plan['price'] / rate, 2)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoBot
    invoice = await cryptobot.create_invoice(
    amount_usdt,
    user_id,
    description=f"Premium subscription for {plan['name']}"
)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ
    user_invoices[invoice['invoice_id']] = {
        "user_id": user_id,
        "plan_id": plan_id,
        "amount": amount_usdt,
        "status": "created"
    }
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot",
        url=invoice['pay_url']
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
        callback_data=f"check_payment_{invoice['invoice_id']}"
    ))
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {plan['name']}\n"
        f"–°—É–º–º–∞: {plan['price']} —Ä—É–± (~{amount_usdt} {config.CRYPTOBOT_CURRENCY})\n"
        f"–°–µ—Ç—å: {config.CRYPTOBOT_NETWORK}\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot'\n"
        "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤ –±–æ—Ç–µ @CryptoBot\n"
        "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    invoice_id = int(callback.data.split("_")[2])
    invoice_info = user_invoices.get(invoice_id)
    
    if not invoice_info:
        await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    plan = SUBSCRIPTION_PLANS.get(invoice_info['plan_id'])
    if not plan:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    invoice = await cryptobot.check_invoice(invoice_id)
    if not invoice:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if invoice.get("status") == "paid":
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await subscription_service.update_subscription(
            user_id,
            "premium",
            plan["duration"],
            db.pool
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
        user_invoices[invoice_id]['status'] = "completed"
        
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
        )
    else:
        await callback.answer("‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@router.message(Command("status"))
async def cmd_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    user_id = message.from_user.id
    
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow(
            """SELECT subscription_type, subscription_expire, 
                  COALESCE(video_credits, 0) as video_credits,
                  (SELECT COUNT(*) FROM generations 
                   WHERE user_id = $1 AND DATE(created_at) = CURRENT_DATE) as generations_today
               FROM users WHERE user_id = $1""",
            user_id
        )
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        limit = (config.PREMIUM_DAILY_LIMIT 
                if user['subscription_type'] == 'premium' 
                else config.FREE_DAILY_LIMIT)
        
        status_msg = [
            f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:",
            f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {user['subscription_type'].capitalize()}",
            f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {(user['subscription_expire'] - datetime.now()).days if user['subscription_expire'] else 0}",
            f"üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {user['generations_today']}/{limit}",
            f"üé´ –í–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç–æ–≤: {user['video_credits']}",
            f"\n–ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ: /buy_videos"
        ]
        
        await message.answer("\n".join(status_msg))

@router.message(Command("admin_subscribe"))
async def admin_grant_subscription(message: Message, command: CommandObject):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if message.from_user.id not in config.ADMIN_IDS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_subscribe <user_id> <plan_id>")
        return
    
    try:
        args = command.args.split()
        user_id = int(args[0])
        plan_id = args[1]
        plan = SUBSCRIPTION_PLANS.get(plan_id)
        
        if not plan:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: 1 (30 –¥–Ω–µ–π), 2 (90 –¥–Ω–µ–π)")
            return
            
        await subscription_service.update_subscription(
            user_id,
            "premium",
            plan["duration"],
            db.pool
        )
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {plan['name']}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: /admin_subscribe <user_id> <plan_id>")

async def check_pending_payments():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã
            for invoice_id, invoice_info in list(user_invoices.items()):
                if invoice_info['status'] == "created":
                    invoice = await cryptobot.check_invoice(invoice_id)
                    if invoice and invoice.get("status") == "paid":
                        user_id = invoice_info['user_id']
                        
                        if invoice_info['type'] == "one_time":
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
                            purchase = ONE_TIME_PURCHASES.get(invoice_info['purchase_id'])
                            if purchase:
                                await db.add_video_credits(user_id, purchase['amount'])
                                user_invoices[invoice_id]['status'] = "completed"
                                
                                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                try:
                                    await router.bot.send_message(
                                        chat_id=user_id,
                                        text=f"‚úÖ –ü–æ–∫—É–ø–∫–∞ {purchase['name']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                             f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {purchase['amount']} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ."
                                    )
                                except Exception as e:
                                    logger.error(f"Error notifying user: {e}")
                        else:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                            plan = SUBSCRIPTION_PLANS.get(invoice_info['plan_id'])
                            if plan:
                                await subscription_service.update_subscription(
                                    user_id,
                                    "premium",
                                    plan["duration"],
                                    db.pool
                                )
                                user_invoices[invoice_id]['status'] = "completed"
                                
                                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                try:
                                    await router.bot.send_message(
                                        chat_id=user_id,
                                        text=f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!"
                                    )
                                except Exception as e:
                                    logger.error(f"Error notifying user: {e}")
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"Error in payment checking task: {e}")
            await asyncio.sleep(60)