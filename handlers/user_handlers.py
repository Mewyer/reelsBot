from aiogram import Router, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services import gpt_service, tts_service, video_service
import time
from services.database import db
from datetime import datetime, timedelta
from config import config
from utils.file_utils import generate_temp_file_path
import logging
import os
import asyncio
from aiohttp import ClientConnectorError
import re

router = Router()

class GenerationStates(StatesGroup):
    waiting_for_idea = State()
    waiting_for_style = State()
    waiting_for_background = State()
    previewing_script = State()
    editing_script = State()

class ProfileStates(StatesGroup):
    waiting_niche = State()
    waiting_style = State()
    waiting_goals = State()
    waiting_tone = State()
    waiting_audience = State()

async def check_usage_limit(user_id: int) -> tuple:
    """Check if user has exceeded daily limit"""
    subscription = await db.get_user_subscription(user_id)
    daily_limit = (
        config.PREMIUM_DAILY_LIMIT 
        if subscription == "premium" 
        else config.FREE_DAILY_LIMIT
    )
    
    usage = await db.get_user_usage(user_id)
    credits = await db.get_video_credits(user_id)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ª–∏–º–∏—Ç–∞
    if credits > 0:
        return (True, credits - 1)  # (can_generate, remaining_credits)
    
    return (usage < daily_limit, daily_limit - usage - 1)

async def _get_available_backgrounds():
    backgrounds = []
    bg_dir = "video_assets"
    
    if not os.path.exists(bg_dir):
        os.makedirs(bg_dir, exist_ok=True)
        return backgrounds
    
    for filename in os.listdir(bg_dir):
        if filename.endswith(('.mp4', '.mov', '.avi')):
            name = filename.split('.')[0].replace('_', ' ').capitalize()
            backgrounds.append({
                'filename': filename,
                'name': name,
                'path': os.path.join(bg_dir, filename)
            })
    return backgrounds

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    profile = await db.get_user_profile(user_id)
    
    if profile:
        await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ: /generate –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å /status")
        return
    
    await state.set_state(ProfileStates.waiting_niche)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n\nüìå –í –∫–∞–∫–æ–π –Ω–∏—à–µ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç? (–ø—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å–æ—Ç–∞, –±–∏–∑–Ω–µ—Å, —Å–ø–æ—Ä—Ç)")

@router.message(ProfileStates.waiting_niche)
async def process_niche(message: Message, state: FSMContext):
    await state.update_data(niche=message.text)
    await state.set_state(ProfileStates.waiting_style)
    await message.answer("üé¨ –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –ø–æ–¥–∞—á–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?\n(–ø—Ä–∏–º–µ—Ä: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π)")

@router.message(ProfileStates.waiting_style)
async def process_style(message: Message, state: FSMContext):
    await state.update_data(content_style=message.text)
    await state.set_state(ProfileStates.waiting_goals)
    await message.answer("üéØ –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —É –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞?\n(–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–¥–∞–∂–∏, –æ–±—É—á–µ–Ω–∏–µ, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ)")

@router.message(ProfileStates.waiting_goals)
async def process_goals(message: Message, state: FSMContext):
    await state.update_data(goals=message.text)
    await state.set_state(ProfileStates.waiting_tone)
    await message.answer("üó£ –ö–∞–∫–æ–π —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?\n(–ø—Ä–∏–º–µ—Ä: –¥—Ä—É–∂–µ—Å–∫–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π)")

@router.message(ProfileStates.waiting_tone)
async def process_tone(message: Message, state: FSMContext):
    await state.update_data(tone_of_voice=message.text)
    await state.set_state(ProfileStates.waiting_audience)
    await message.answer("üë• –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é\n(–ø—Ä–∏–º–µ—Ä: –∂–µ–Ω—â–∏–Ω—ã 25-35, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏, –ø–æ–¥—Ä–æ—Å—Ç–∫–∏)")

@router.message(ProfileStates.waiting_audience)
async def process_audience(message: Message, state: FSMContext):
    profile_data = await state.get_data()
    profile_data["target_audience"] = message.text
    
    try:
        await db.save_user_profile(message.from_user.id, profile_data)
        await state.clear()
        await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /generate —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ /status —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("generate"))
async def cmd_new_video(message: Message, state: FSMContext):
    user_id = message.from_user.id
    profile = await db.get_user_profile(user_id)
    
    if not profile:
        await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    can_generate, remaining = await check_usage_limit(user_id)
    if not can_generate:
        await message.answer(
            f"‚ö†Ô∏è –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n"
            f"–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {_time_until_midnight()}.\n"
            f"–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É: /premium"
        )
        return
    
    await state.set_state(GenerationStates.waiting_for_idea)
    await message.answer("üí° –û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)\n–ù–∞–ø—Ä–∏–º–µ—Ä: '5 –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'")

# –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—éapprove_script
def _time_until_midnight() -> str:
    now = datetime.now()
    midnight = (now + timedelta(days=1)).replace(
        hour=0, minute=0, second=0, microsecond=0
    )
    delta = midnight - now
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    return f"{hours} —á. {minutes} –º–∏–Ω."

@router.message(GenerationStates.waiting_for_idea)
async def process_idea(message: Message, state: FSMContext):
    if message.voice:
        await message.answer("üîä –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
    
    await state.update_data(idea=message.text)
    await state.set_state(GenerationStates.waiting_for_style)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", callback_data="style_expert")
    builder.button(text="üé≠ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π", callback_data="style_entertain")
    builder.button(text="üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", callback_data="style_inspire")
    builder.button(text="üé• –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π", callback_data="style_cinematic")
    builder.adjust(2)
    
    await message.answer("üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ:", reply_markup=builder.as_markup())

@router.callback_query(GenerationStates.waiting_for_style, F.data.startswith("style_"))
async def process_style_selection(callback: CallbackQuery, state: FSMContext):
    style_map = {
        "style_expert": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
        "style_entertain": "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π",
        "style_inspire": "–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π",
        "style_cinematic": "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π"
    }
    
    style = style_map.get(callback.data, "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π")
    await state.update_data(style=style)
    await callback.message.edit_reply_markup()
    await state.set_state(GenerationStates.waiting_for_background)
    
    backgrounds = await _get_available_backgrounds()
    builder = InlineKeyboardBuilder()
    
    for bg in backgrounds:
        builder.button(text=f"üé• {bg['name']}", callback_data=f"bg_preview_{bg['filename']}")
    builder.button(text="üö´ –ë–µ–∑ —Ñ–æ–Ω–∞", callback_data="bg_none")
    builder.adjust(2)
    
    await callback.message.answer("üé• –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ:", reply_markup=builder.as_markup())
    

@router.callback_query(GenerationStates.waiting_for_background, F.data.startswith("bg_preview_"))
async def preview_background(callback: CallbackQuery):
    bg_filename = callback.data.replace("bg_preview_", "")
    bg_path = os.path.join("video_assets", bg_filename)
    
    if not os.path.exists(bg_path):
        await callback.answer("‚ö†Ô∏è –§–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        video = FSInputFile(bg_path)
        await callback.message.answer_video(
            video,
            caption=f"üé• –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ–Ω–∞: {bg_filename.split('.')[0].replace('_', ' ').capitalize()}",
            width=1080,
            height=1920
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ñ–æ–Ω", callback_data=f"bg_select_{bg_filename}")
        builder.button(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ", callback_data="bg_show_all")
        builder.adjust(1)
        
        await callback.message.answer("–ù—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç —Ñ–æ–Ω?", reply_markup=builder.as_markup())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ–Ω–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", show_alert=True)

@router.callback_query(GenerationStates.waiting_for_background, F.data.startswith("bg_select_"))
async def select_background(callback: CallbackQuery, state: FSMContext):
    bg_filename = callback.data.replace("bg_select_", "")
    await state.update_data(background=bg_filename)
    await callback.message.edit_reply_markup()
    await callback.message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥")
    
    user_id = callback.from_user.id
    data = await state.get_data()
    
    try:
        profile = await db.get_user_profile(user_id)
        script = await gpt_service.generate_script(
            f"–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≤–∏–¥–µ–æ –≤ {data['style']} —Å—Ç–∏–ª–µ. –¢–µ–º–∞: {data['idea']}",
            profile
        )
        
        if not script:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏")
        
        await state.update_data(script=script)
        await state.set_state(GenerationStates.previewing_script)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üëç –û–¥–æ–±—Ä–∏—Ç—å", callback_data="script_approve")
        builder.button(text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="script_edit")
        builder.button(text="üîÑ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="script_regenerate")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="script_cancel")
        builder.adjust(1, repeat=True)
        
        await callback.message.answer(
            f"üé¨ –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≥–æ—Ç–æ–≤!\n\n–°—Ç–∏–ª—å: {data['style']}\n–¢–µ–º–∞: {data['idea']}\n–§–æ–Ω: {bg_filename.split('.')[0].replace('_', ' ').capitalize()}\n\n{script}",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏")
        await state.clear()

@router.callback_query(GenerationStates.waiting_for_background, F.data == "bg_show_all")
async def show_all_backgrounds(callback: CallbackQuery):
    backgrounds = await _get_available_backgrounds()
    builder = InlineKeyboardBuilder()
    
    for bg in backgrounds:
        builder.button(text=f"üé• {bg['name']}", callback_data=f"bg_preview_{bg['filename']}")
    builder.button(text="üö´ –ë–µ–∑ —Ñ–æ–Ω–∞", callback_data="bg_none")
    builder.adjust(2)
    
    await callback.message.answer("üé• –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–Ω—ã:", reply_markup=builder.as_markup())

@router.callback_query(GenerationStates.waiting_for_background, F.data == "bg_none")
async def select_no_background(callback: CallbackQuery, state: FSMContext):
    await state.update_data(background=None)
    await callback.message.edit_reply_markup()
    
    user_id = callback.from_user.id
    data = await state.get_data()
    
    try:
        profile = await db.get_user_profile(user_id)
        script = await gpt_service.generate_script(
            f"–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≤–∏–¥–µ–æ –≤ {data['style']} —Å—Ç–∏–ª–µ. –¢–µ–º–∞: {data['idea']}",
            profile
        )
        
        if not script:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏")
        
        await state.update_data(script=script)
        await state.set_state(GenerationStates.previewing_script)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üëç –û–¥–æ–±—Ä–∏—Ç—å", callback_data="script_approve")
        builder.button(text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="script_edit")
        builder.button(text="üîÑ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="script_regenerate")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="script_cancel")
        builder.adjust(1, repeat=True)
        
        await callback.message.answer(
            f"üé¨ –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≥–æ—Ç–æ–≤!\n\n–°—Ç–∏–ª—å: {data['style']}\n–¢–µ–º–∞: {data['idea']}\n–§–æ–Ω: –ß–µ—Ä–Ω—ã–π\n\n{script}",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏")
        await state.clear()

@router.message(Command("status"))
async def cmd_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    user_id = message.from_user.id
    
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow(
            """SELECT subscription_type, subscription_expire, 
                  COALESCE(video_credits, 0) as video_credits,
                  (SELECT COUNT(*) FROM generations 
                   WHERE user_id = $1 AND DATE(created_at) = CURRENT_DATE) as generations_today
               FROM users WHERE user_id = $1""",
            user_id
        )
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        limit = (config.PREMIUM_DAILY_LIMIT 
                if user['subscription_type'] == 'premium' 
                else config.FREE_DAILY_LIMIT)
        
        status_msg = [
            f"üìä –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å:",
            f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {user['subscription_type'].capitalize()}",
            f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {(user['subscription_expire'] - datetime.now()).days if user['subscription_expire'] else 0}",
            f"üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {user['generations_today']}/{limit}",
            f"üé´ –í–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç–æ–≤: {user['video_credits']}",
            f"\n–ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ: /buy_videos"
             f"\n–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º: /subscribe"
        ]
        
        await message.answer("\n".join(status_msg))

@router.callback_query(GenerationStates.previewing_script, F.data == "script_approve")
async def approve_script(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –∫—Ä–µ–¥–∏—Ç—ã
    can_generate, remaining = await check_usage_limit(user_id)
    credits = await db.get_video_credits(user_id)
    
    if not can_generate and credits <= 0:
        await callback.message.edit_reply_markup()
        await callback.message.answer(
            f"‚ö†Ô∏è –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n"
            f"–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {_time_until_midnight()}.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ: /buy_videos"
        )
        await state.clear()
        return
    
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
    
    data = await state.get_data()
    audio_path = "audio_assets/"
    video_path = None
    
    try:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞, –Ω–æ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–µ–¥–∏—Ç
        if not can_generate and credits > 0:
            await db.use_video_credit(user_id)
            credits -= 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        generation_id = await db.log_generation(
            user_id=user_id,
            prompt=f"Style: {data.get('style')}, Idea: {data.get('idea')}",
            status="processing"
        )
        
        voiceover_text = data['script']
        audio_filename = f"audio_{user_id}_{int(time.time())}.mp3"
        audio_path = os.path.join("generated_audio", audio_filename)
        
        os.makedirs("generated_audio", exist_ok=True)
        success = await tts_service.generate_audio(voiceover_text, audio_path)
        
        if not success or not os.path.exists(audio_path):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        
        video_path = generate_temp_file_path("mp4")
        success = await video_service.create_video(
            script=data['script'],
            audio_path=audio_path,
            output_path=video_path,
            background=data.get('background')
        )
        
        if not success or not os.path.exists(video_path):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await db.update_generation(
            generation_id=generation_id,
            script=data['script'],
            audio_path=audio_path,
            video_path=video_path,
            status="completed"
        )
        
        video = FSInputFile(video_path)
        await callback.message.answer_video(
            video, 
            caption="üé¨ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!",
            width=1080,
            height=1920
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ª–∏–º–∏—Ç/–∫—Ä–µ–¥–∏—Ç—ã
        if credits > 0:
            await callback.message.answer(
                f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –≤–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç–æ–≤: {credits}\n"
                f"–ö—É–ø–∏—Ç—å –µ—â–µ: /buy_videos"
            )
        else:
            _, remaining = await check_usage_limit(user_id)
            await callback.message.answer(
                f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {remaining}\n"
                f"–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {_time_until_midnight()}"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'generation_id' in locals():
            await db.update_generation(
                generation_id=generation_id,
                status="failed"
            )
    finally:
        for path in [audio_path, video_path]:
            if path and os.path.exists(path):
                try:
                    os.remove(path)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
        await state.clear()


@router.message(Command("premium"))
async def cmd_premium(message: Message):
    await message.answer(
        "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç:\n\n"
        f"‚Ä¢ {config.PREMIUM_DAILY_LIMIT} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å (–≤–º–µ—Å—Ç–æ {config.FREE_DAILY_LIMIT})\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ–æ–Ω–∞–º\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /subscribe"
    )

@router.callback_query(GenerationStates.previewing_script, F.data == "script_edit")
async def request_script_edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–∞–≤–∫–∏ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é:")
    await state.set_state(GenerationStates.editing_script)

@router.message(GenerationStates.editing_script)
async def process_script_edit(message: Message, state: FSMContext):
    await message.answer("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –≤–∞—à–∏ –ø—Ä–∞–≤–∫–∏...")
    
    user_id = message.from_user.id
    data = await state.get_data()
    
    try:
        profile = await db.get_user_profile(user_id)
        improved_script = await gpt_service.improve_script(data['script'], message.text, profile)
        
        if not improved_script:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
        
        await state.update_data(script=improved_script)
        await state.set_state(GenerationStates.previewing_script)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üëç –û–¥–æ–±—Ä–∏—Ç—å", callback_data="script_approve")
        builder.button(text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="script_edit")
        builder.button(text="üîÑ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="script_regenerate")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="script_cancel")
        builder.adjust(1, repeat=True)
        
        await message.answer(f"üîÑ –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n{improved_script}", reply_markup=builder.as_markup())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∫–∏")
        await state.set_state(GenerationStates.previewing_script)

@router.callback_query(GenerationStates.previewing_script, F.data == "script_regenerate")
async def regenerate_script(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è...")
    
    user_id = callback.from_user.id
    data = await state.get_data()
    
    try:
        profile = await db.get_user_profile(user_id)
        script = await gpt_service.generate_script(
            f"–°–æ–∑–¥–∞–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Å—Ç–∏–ª–µ: {data['style']}\n–¢–µ–º–∞: {data['idea']}",
            profile
        )
        
        if not script:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
        
        await state.update_data(script=script)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üëç –û–¥–æ–±—Ä–∏—Ç—å", callback_data="script_approve")
        builder.button(text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="script_edit")
        builder.button(text="üîÑ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="script_regenerate")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="script_cancel")
        builder.adjust(1, repeat=True)
        
        await callback.message.answer(f"üÜï –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –≥–æ—Ç–æ–≤!\n\n{script}", reply_markup=builder.as_markup())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")

@router.callback_query(GenerationStates.previewing_script, F.data == "script_cancel")
async def cancel_generation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()