from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types
from typing import Optional
import logging
import asyncpg
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InputFile
from config import config
import asyncio
from datetime import datetime, timedelta
from services.database import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

router = Router()
logger = logging.getLogger(__name__)

class AdminSubscriptionStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_subscription_type = State()
    waiting_for_duration = State()

class BroadcastStates(StatesGroup):
    waiting_for_message = State()
    confirm_send = State()

class UserSearchStates(StatesGroup):
    waiting_for_query = State()

async def check_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.ADMIN_IDS

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not await check_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list"),
        types.InlineKeyboardButton(text="üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="admin_generations"),
        types.InlineKeyboardButton(text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    )
    builder.adjust(2)
    
    await message.answer(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "admin_users_list")
async def admin_users_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        async with db.pool.acquire() as conn:
            users = await conn.fetch("""
                SELECT user_id, username, full_name 
                FROM users 
                ORDER BY username IS NULL, username ASC, created_at DESC
                LIMIT 100
            """)
        
        if not users:
            await callback.answer("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        builder = InlineKeyboardBuilder()
        for user in users:
            username = user['username'] or f"ID:{user['user_id']}"
            builder.add(
                types.InlineKeyboardButton(
                    text=f"@{username}",
                    callback_data=f"user_detail_{user['user_id']}"
                )
            )
        builder.adjust(1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–Ω–æ–≥–æ
        if len(users) == 100:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ",
                    callback_data="admin_users_list_more"
                )
            )
        
        await callback.message.answer(
            "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_users_list: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("user_detail_"))
async def show_user_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        user_id = int(callback.data.split("_")[2])
        await show_user_profile(callback.message, user_id=user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")
    finally:
        await callback.answer()

async def show_user_profile(message: Message, user_data: Optional[dict] = None, user_id: Optional[int] = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        if user_data is None and user_id is not None:
            async with db.pool.acquire() as conn:
                user_data = await conn.fetchrow(
                    """
                    SELECT 
                        u.*,
                        p.niche,
                        p.content_style,
                        COUNT(g.id) as generations_count,
                        SUM(CASE WHEN g.status = 'completed' THEN 1 ELSE 0 END) as completed_generations,
                        (SELECT COUNT(*) FROM generations 
                         WHERE user_id = u.user_id AND DATE(created_at) = CURRENT_DATE) as today_generations,
                        (SELECT COUNT(*) FROM generations 
                         WHERE user_id = u.user_id AND DATE_TRUNC('month', created_at) = DATE_TRUNC('month', CURRENT_DATE)) as month_generations
                    FROM users u
                    LEFT JOIN user_profiles p ON u.user_id = p.user_id
                    LEFT JOIN generations g ON u.user_id = g.user_id
                    WHERE u.user_id = $1
                    GROUP BY u.user_id, p.niche, p.content_style
                    """,
                    user_id
                )
        
        if not user_data:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if user_data['subscription_type'] == 'free':
            daily_limit = config.FREE_DAILY_LIMIT
            monthly_limit = config.FREE_MONTHLY_LIMIT
        elif user_data['subscription_type'] == 'lite':
            daily_limit = config.LITE_DAILY_LIMIT
            monthly_limit = config.LITE_MONTHLY_LIMIT
        else:  # premium
            daily_limit = config.PREMIUM_DAILY_LIMIT
            monthly_limit = config.PREMIUM_MONTHLY_LIMIT
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = f"@{user_data['username']}"
        full_name = user_data['full_name'] 
        expire_date = user_data['subscription_expire'].strftime("%d.%m.%Y") if user_data['subscription_expire'] else "–Ω–µ—Ç"
        
        response = [
            "üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            f"üÜî ID: {user_data['user_id']}",
            f"üì± Username: {username}",
            f"üë§ –ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}",
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['created_at'].strftime('%d.%m.%Y %H:%M')}",
            f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {user_data['subscription_type'].capitalize()}",
            f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {expire_date}",
            f"üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_data['today_generations']}/{daily_limit}",
            f"üìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {user_data['month_generations']}/{monthly_limit}",
            f"üé´ –í–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç—ã: {user_data['video_credits']}",
            f"üè∑ –ù–∏—à–∞: {user_data['niche'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
            f"üé≠ –°—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {user_data['content_style'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
            f"üé¨ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_data['generations_count']}",
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_data['completed_generations']}",
        ]
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(
                text="üíé –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data=f"admin_manage_sub_{user_data['user_id']}"
            ),
            types.InlineKeyboardButton(
                text="üé• –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã",
                callback_data=f"admin_add_credits_{user_data['user_id']}"
            ),
            types.InlineKeyboardButton(
                text="üé¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                callback_data=f"admin_user_gens_{user_data['user_id']}"
            ),
            types.InlineKeyboardButton(
                text="üîô –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                callback_data="admin_users_list"
            )
        )
        builder.adjust(1)
        
        await message.answer(
            "\n".join(response),
            reply_markup=builder.as_markup()
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")


@router.callback_query(F.data.startswith("admin_manage_sub_"))
async def admin_manage_subscription(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        user_id = int(callback.data.split("_")[3])
        await state.update_data(user_id=user_id)
        
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(text="üíé Premium", callback_data="sub_type_premium"),
            types.InlineKeyboardButton(text="üì± Lite", callback_data="sub_type_lite"),
            types.InlineKeyboardButton(text="üÜì Free", callback_data="sub_type_free"),
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"user_detail_{user_id}")
        )
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AdminSubscriptionStates.waiting_for_subscription_type)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_manage_subscription: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–æ–π")
    finally:
        await callback.answer()



@router.callback_query(F.data.startswith("admin_user_gens_"))
async def admin_user_generations(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        user_id = int(callback.data.split("_")[3])
        
        async with db.pool.acquire() as conn:
            user = await conn.fetchrow("SELECT username, full_name FROM users WHERE user_id = $1", user_id)
            generations = await conn.fetch(
                """
                SELECT id, status, created_at, updated_at 
                FROM generations 
                WHERE user_id = $1
                ORDER BY created_at DESC
                LIMIT 20
                """,
                user_id
            )
        
        if not user:
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        username = f"@{user['username']}" if user['username'] else f"ID:{user_id}"
        response = [
            f"üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['full_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'} {username}:\n"
        ]
        
        for gen in generations:
            gen_info = (
                f"\nüÜî ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {gen['id']}",
                f"üìù –°—Ç–∞—Ç—É—Å: {gen['status']}",
                f"üïí –°–æ–∑–¥–∞–Ω–æ: {gen['created_at'].strftime('%d.%m.%Y %H:%M')}",
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {gen['updated_at'].strftime('%d.%m.%Y %H:%M')}",
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )
            response.extend(gen_info)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é",
                callback_data=f"user_detail_{user_id}"
            )
        )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_message = ""
        for part in response:
            if len(current_message) + len(part) > 4000:
                await callback.message.answer(current_message)
                current_message = part
            else:
                current_message += "\n" + part
        
        if current_message:
            await callback.message.answer(
                current_message,
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_user_generations: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
    finally:
        await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞):\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await state.set_state(BroadcastStates.waiting_for_message)
    await callback.answer()

@router.message(BroadcastStates.waiting_for_message, F.text == "/cancel")
async def cancel_broadcast(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.clear()
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    content = {
        "text": message.html_text if message.text or message.caption else None,
        "media_type": None,
        "media_id": None,
        "has_media": False
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    if message.photo:
        content["media_type"] = "photo"
        content["media_id"] = message.photo[-1].file_id
        content["has_media"] = True
    elif message.video:
        content["media_type"] = "video"
        content["media_id"] = message.video.file_id
        content["has_media"] = True
    elif message.document:
        content["media_type"] = "document"
        content["media_id"] = message.document.file_id
        content["has_media"] = True
    
    await state.update_data(content=content)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = "üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    if content["has_media"]:
        preview_text += f"[{content['media_type'].capitalize()}]\n"
    if content["text"]:
        preview_text += content["text"]
    
    if content["has_media"]:
        media = InputFile(content["media_id"])
        if content["media_type"] == "photo":
            await message.answer_photo(
                photo=media,
                caption=preview_text,
                reply_markup=builder.as_markup()
            )
        elif content["media_type"] == "video":
            await message.answer_video(
                video=media,
                caption=preview_text,
                reply_markup=builder.as_markup()
            )
        elif content["media_type"] == "document":
            await message.answer_document(
                document=media,
                caption=preview_text,
                reply_markup=builder.as_markup()
            )
    else:
        await message.answer(
            preview_text,
            reply_markup=builder.as_markup()
        )

@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    data = await state.get_data()
    content = data.get("content", {})
    
    if not content:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return
    
    await callback.message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with db.pool.acquire() as conn:
            users = await conn.fetch("SELECT user_id FROM users")
        
        total_users = len(users)
        success = 0
        failed = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user in users:
            try:
                if content["has_media"]:
                    media = InputFile(content["media_id"])
                    if content["media_type"] == "photo":
                        await callback.bot.send_photo(
                            chat_id=user["user_id"],
                            photo=media,
                            caption=content["text"]
                        )
                    elif content["media_type"] == "video":
                        await callback.bot.send_video(
                            chat_id=user["user_id"],
                            video=media,
                            caption=content["text"]
                        )
                    elif content["media_type"] == "document":
                        await callback.bot.send_document(
                            chat_id=user["user_id"],
                            document=media,
                            caption=content["text"]
                        )
                else:
                    await callback.bot.send_message(
                        chat_id=user["user_id"],
                        text=content["text"]
                    )
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                failed += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä Telegram
            await asyncio.sleep(0.1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        report = (
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
        )
        await callback.message.answer(report)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    finally:
        await state.clear()
        await callback.answer()

@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await state.clear()
    await callback.message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        async with db.pool.acquire() as conn:
            stats = await conn.fetchrow("""
                SELECT 
                    COUNT(DISTINCT u.user_id) as total_users,
                    COUNT(DISTINCT CASE WHEN u.subscription_type = 'premium' THEN u.user_id END) as premium_users,
                    COUNT(DISTINCT g.id) as total_generations,
                    COUNT(DISTINCT CASE WHEN g.created_at > NOW() - INTERVAL '7 days' THEN g.user_id END) as active_week_users,
                    COUNT(DISTINCT CASE WHEN g.created_at > NOW() - INTERVAL '30 days' THEN g.user_id END) as active_month_users
                FROM users u
                LEFT JOIN generations g ON u.user_id = g.user_id
            """)
            
            niches = await conn.fetch("""
                SELECT niche, COUNT(*) as count 
                FROM user_profiles 
                WHERE niche IS NOT NULL 
                GROUP BY niche 
                ORDER BY count DESC 
                LIMIT 5
            """)
            
            generations_stats = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed,
                    COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed
                FROM generations
            """)
        
        response = [
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n",
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}",
            f"üíé –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['premium_users']}",
            f"üé¨ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {stats['total_generations']}",
            f"   ‚úîÔ∏è –£—Å–ø–µ—à–Ω—ã—Ö: {generations_stats['completed']}",
            f"   ‚ùå –û—à–∏–±–æ–∫: {generations_stats['failed']}",
            f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_week_users']}",
            f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['active_month_users']}\n",
            "üè∑ –¢–æ–ø –Ω–∏—à:"
        ]
        
        for niche in niches:
            response.append(f"- {niche['niche']}: {niche['count']}")
        
        await callback.message.answer("\n".join(response))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        await callback.answer()


@router.callback_query(F.data == "admin_grant_subscription")
async def admin_grant_subscription_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await state.set_state(AdminSubscriptionStates.waiting_for_user_id)
    await callback.answer()

@router.message(AdminSubscriptionStates.waiting_for_user_id, F.text == "/cancel")
async def cancel_grant_subscription(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.clear()
    await message.answer("‚ùå –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.message(AdminSubscriptionStates.waiting_for_user_id)
async def process_user_id_for_subscription(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="sub_type_premium"),
            types.InlineKeyboardButton(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", callback_data="sub_type_free"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="sub_type_cancel")
        )
        builder.adjust(2)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AdminSubscriptionStates.waiting_for_subscription_type)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.callback_query(AdminSubscriptionStates.waiting_for_subscription_type, F.data.startswith("sub_type_"))
async def process_subscription_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    sub_type = callback.data.split("_")[2]
    data = await state.get_data()
    user_id = data["user_id"]
    
    if sub_type == "cancel":
        await state.clear()
        await callback.message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.answer()
        return
    
    await state.update_data(subscription_type=sub_type)
    
    if sub_type == "free":
        # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        async with db.pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET subscription_type = 'free', subscription_expire = NULL WHERE user_id = $1",
                user_id
            )
        
        await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        await state.clear()
    else:
        # –î–ª—è –ø—Ä–µ–º–∏—É–º–∞ –∏ lite –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {sub_type.capitalize()}:\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        await state.set_state(AdminSubscriptionStates.waiting_for_duration)
    
    await callback.message.edit_reply_markup()
    await callback.answer()


@router.message(AdminSubscriptionStates.waiting_for_duration, F.text == "/cancel")
async def cancel_subscription_duration(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.clear()
    await message.answer("‚ùå –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.message(AdminSubscriptionStates.waiting_for_duration)
async def process_subscription_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError
        
        data = await state.get_data()
        user_id = data["user_id"]
        sub_type = data["subscription_type"]
        expire_date = datetime.now() + timedelta(days=duration)
        
        async with db.pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET subscription_type = $1, subscription_expire = $2 WHERE user_id = $3",
                sub_type, expire_date, user_id
            )
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω —Ç–∞—Ä–∏—Ñ {sub_type.capitalize()} –Ω–∞ {duration} –¥–Ω–µ–π\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expire_date.strftime('%d.%m.%Y')}"
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")

@router.callback_query(F.data == "admin_revoke_subscription")
async def admin_revoke_subscription(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await state.set_state(AdminSubscriptionStates.waiting_for_user_id)
    await callback.answer()

@router.message(AdminSubscriptionStates.waiting_for_user_id)
async def process_revoke_subscription(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_id = int(message.text)
        
        async with db.pool.acquire() as conn:
            result = await conn.execute(
                "UPDATE users SET subscription_type = 'free', subscription_expire = NULL WHERE user_id = $1",
                user_id
            )
        
        if result.split()[1] == '1':
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.callback_query(F.data.startswith("admin_add_credits_"))
async def admin_add_credits_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        user_id = int(callback.data.split("_")[3])
        await state.update_data(user_id=user_id)
        
        builder = InlineKeyboardBuilder()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        builder.add(
            types.InlineKeyboardButton(text="1 –∫—Ä–µ–¥–∏—Ç", callback_data="credits_1"),
            types.InlineKeyboardButton(text="5 –∫—Ä–µ–¥–∏—Ç–æ–≤", callback_data="credits_5"),
            types.InlineKeyboardButton(text="10 –∫—Ä–µ–¥–∏—Ç–æ–≤", callback_data="credits_10"),
            types.InlineKeyboardButton(text="20 –∫—Ä–µ–¥–∏—Ç–æ–≤", callback_data="credits_20"),
            types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="credits_custom"),
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"user_detail_{user_id}")
        )
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_add_credits_start: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤")
    finally:
        await callback.answer()

@router.callback_query(F.data.startswith("credits_"))
async def process_credits_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    try:
        data = await state.get_data()
        user_id = data["user_id"]
        
        if callback.data == "credits_custom":
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
            await state.set_state(AdminSubscriptionStates.waiting_for_duration)
            await callback.message.edit_reply_markup()
            await callback.answer()
            return
        
        amount = int(callback.data.split("_")[1])
        success = await db.add_video_credits(user_id, amount)
        
        if success:
            credits = await db.get_video_credits(user_id)
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –≤–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                f"–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            )
        else:
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã")
        
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤")
    finally:
        await callback.answer()

@router.message(AdminSubscriptionStates.waiting_for_duration)
async def process_custom_credits(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
        
        data = await state.get_data()
        user_id = data["user_id"]
        
        success = await db.add_video_credits(user_id, amount)
        
        if success:
            credits = await db.get_video_credits(user_id)
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –≤–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                f"–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            )
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminSubscriptionStates.waiting_for_user_id)
async def process_add_credits(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    try:
        parts = message.text.split()
        if len(parts) != 2:
            raise ValueError
            
        user_id = int(parts[0])
        amount = int(parts[1])
        
        if amount <= 0:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        success = await db.add_video_credits(user_id, amount)
        
        if success:
            credits = await db.get_video_credits(user_id)
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –≤–∏–¥–µ–æ-–∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                f"–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            )
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12345 5)")

@router.callback_query(F.data == "admin_back")
async def admin_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await cmd_admin(callback.message)
    await callback.answer()

@router.callback_query(F.data == "admin_generations")
async def admin_generations(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        async with db.pool.acquire() as conn:
            generations = await conn.fetch("""
                SELECT 
                    g.id,
                    g.user_id,
                    u.username,
                    g.status,
                    g.created_at,
                    g.updated_at,
                    LENGTH(g.script) as script_length,
                    g.audio_path IS NOT NULL as has_audio,
                    g.video_path IS NOT NULL as has_video
                FROM generations g
                LEFT JOIN users u ON g.user_id = u.user_id
                ORDER BY g.created_at DESC
                LIMIT 30
            """)
        
        if not generations:
            await callback.answer("‚ÑπÔ∏è –ù–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
            return
        
        response = ["üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (30):\n"]
        for gen in generations:
            username = f"@{gen['username']}" if gen['username'] else f"ID:{gen['user_id']}"
            gen_info = (
                f"\nüÜî ID: {gen['id']}",
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}",
                f"üìù –°—Ç–∞—Ç—É—Å: {gen['status']}",
                f"üìè –î–ª–∏–Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞: {gen['script_length']} —Å–∏–º–≤–æ–ª–æ–≤",
                f"üîä –ê—É–¥–∏–æ: {'–µ—Å—Ç—å' if gen['has_audio'] else '–Ω–µ—Ç'}",
                f"üé• –í–∏–¥–µ–æ: {'–µ—Å—Ç—å' if gen['has_video'] else '–Ω–µ—Ç'}",
                f"üïí –°–æ–∑–¥–∞–Ω–æ: {gen['created_at'].strftime('%d.%m.%Y %H:%M')}",
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )
            response.extend(gen_info)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_message = ""
        for part in response:
            if len(current_message) + len(part) > 4000:
                await callback.message.answer(current_message)
                current_message = part
            else:
                current_message += "\n" + part
        
        if current_message:
            await callback.message.answer(current_message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_generations: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
    finally:
        await callback.answer()